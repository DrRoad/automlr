#+TITLE: Automatic Machine Learning Algorithm Configuration in R
* Introduction
Automlr is an R-package for *automatically* configuring *mlr* machine learning algorithms. It is designed for simplicity of use and supposed to run with minimal user intervention.

* Usage
To run a small example, execute
#+BEGIN_SRC R
amrun = automlr(pid.task, backend="random", budget=c(evals=10))
result = amfinish(amrun)
print(result, longform=TRUE)
#+END_SRC
This example already shows the mandatory arguments of ~automlr~: The task for which to optimize, the backend to use (may be "random", "irace" or "mbo"), and a computational budget. The resulting object can be given to another ~automlr~ call with a different budget to continue optimizing, or to ~amfinish~ to finalize the run.

The functions and data exported by automlr that will be of interest to the user:
- automlr invocation
  - automlr :: The main entry point; can be called with a task and a backend, or with an object that was returned by a previous automlr invocation, or even with a file name that was used by automlr to save the state. The user can choose:
    - which backend to use (~backend~)
    - the computational budget (~budget~)
    - a possible savefile (~savefile~) and the interval in which to save to a file (~save.interval~)
    - a measure for which to optimize, if not the task's default measure (~measure~)
  - amfinish :: Generates an ~AMResult~ object that contains information about the optimization result.
  - autolearners :: A collection of mlr learners with corresponding search space.
  - autolearnersNoWrappers :: as autolearners, but without preprocessing wrappers
- searchspace definition
  - autolearner :: define your own mlr learner to put in a search space
  - autoWrapper :: define an mlr wrapper to use in a search space
  - sp :: for defining parameters that are given to ~autolearner~
See their respective R documentation for more information and additional arguments.

* Project status
Currently the project is undergoing heavy development; while the spirit of the application is expected to be stable, the user interface may undergo slight changes in the future. Expect the internals of automlr to be changing regularly.

** Project TODO
(under consideration, subject to change)
- [-] release 0.1
  - [X] write preliminary readme
  - [ ] Tests pass
  - [X] adapt coding style to mlrOrg
  - [X] write documentation for entry points
  - [X] Adapt entry point docu to mlrOrg style
  - [ ] finish writing wrappers
  - [ ] correct version dependencies 
  - [ ] argument for debug level
  - [ ] package build generate mlrLearners.R
  - [ ] mlrLearners, mlrLearnersNoWrap variables
  - [ ] write NEWS
- [ ] release 0.2
  - [ ] instead of backend string, accept backend objects that carry optimization arguments specific to the backend
  - [ ] event handling
    - [ ] catch Ctrl-C and handle gracefully
    - [ ] maximum walltime overrun
    - [ ] make sure mlr on.learner.error, on.learner.warning are handled well
    - [ ] nicer printing
  - [ ] searchspace
    - [ ] add metalearner wrappers
    - [ ] respect parameter equality IDs
    - [ ] automatically recognize absence of learner (in a hypothetical future mlr version) and don't throw an error
  - [ ] tests
    - [ ] differentiate expensive tests from fast tests
    - [ ] 100% test coverage
    - [ ] tests for preprocessing
    - [ ] test for all possible wrong arguments
    - [ ] other things?
  - [ ] simultaneous multiple task optimization
  - [ ] write a nicer readme **selfconscious**
  - [ ] parallelMap is not required as dependency, make it optional.
- [ ] release 0.3
  - [ ] regression learners
  - [ ] task property transformation by wrappers (e.g. recognize a wrapper converts factors to numerics and allow numerics learners)
  - [ ] use seeds in learners that use external RNGs
- [ ] release 0.4
  - [ ] other backends?
  - [ ] batchJobs integration? (e.g. break run down into smaller jobs)
  - [ ] priors for learners?
- [ ] release 1.0
  - [ ] everything is really, really stable
